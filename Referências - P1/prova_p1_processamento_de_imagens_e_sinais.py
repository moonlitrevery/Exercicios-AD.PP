# -*- coding: utf-8 -*-
"""Prova P1 - Processamento de Imagens e Sinais - João Vitor Gozzo Bruschi.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gXvZgRRqqUp1PmEQjj-C0P4AsTb9fbNs

# Prova P1 - Processamento de Imagens e Sinais
## João Vitor Gozzo Bruschi - 1041549
"""

## Importações pra não ter que fazer tudo de novo a cada exercício
import numpy as np
import cv2
import matplotlib.pyplot as plt

"""### Exercício 1"""

img = np.zeros((100, 100, 3), dtype=np.uint8)
cv2.line(img, (0, 0), (99, 99), (0, 255, 0), thickness=2)
cv2.line(img, (0, 48), (99, 48), (0, 0, 255), thickness=4)
cv2.circle(img, (50, 50), 5, (255, 0, 0), thickness=6)

cv2.putText(
    img,
    "PIS e legal",
    (20, 80),
    cv2.FONT_HERSHEY_SIMPLEX,
    0.25,
    (255, 255, 255),
    1,
    lineType=cv2.LINE_AA
)

cv2.imwrite("1.png", img)

"""### Exercício 2"""

data = [
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
    [0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0],
    [0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0],
    [0,0,1,1,1,1,1,0,0,0,0,1,1,1,0,0],
    [0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0],
    [0,0,0,1,1,0,0,0,0,1,1,1,1,1,0,0],
    [0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0],
    [0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0],
    [0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0],
    [0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0],
    [0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0],
    [0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0],
    [0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0],
    [0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0],
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
]

img = np.array(data, dtype=np.uint8) * 255

## 2_1
cross_kernel = cv2.getStructuringElement(cv2.MORPH_CROSS, (5, 5))
erosion = cv2.erode(img, cross_kernel)
cv2.imwrite("2_1.png", erosion)

## 2_2
ellipse_kernel = cv2.getStructuringElement(cv2.MORPH_ELLIPSE, (9, 9))
dilation = cv2.dilate(img, ellipse_kernel)
cv2.imwrite("2_2.png", dilation)

## 2_3
square_kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (5, 5))
closing = cv2.morphologyEx(img, cv2.MORPH_CLOSE, square_kernel)
cv2.imwrite("2_3.png", closing)

## 2_4
opening = cv2.morphologyEx(img, cv2.MORPH_OPEN, square_kernel)
cv2.imwrite("2_4.png", opening)

"""### Exercício 3"""

img = cv2.imread("ponte.png")

## 3_1
gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
cv2.imwrite("3_1.png", gray)

## 3_2
r_channel = img[:, :, 2]
cv2.imwrite("3_2.png", r_channel)

## 3_3
only_r = np.zeros_like(img)
only_r[:, :, 2] = img[:, :, 2]
cv2.imwrite("3_3.png", only_r)

## 3_4
hsv = cv2.cvtColor(img, cv2.COLOR_BGR2HSV)
cv2.imwrite("3_4.png", hsv)

## 3_5
h, w = img.shape[:2]
resized = cv2.resize(img, (w // 2, h // 2))
cv2.imwrite("3_5.png", resized)

## 3_6
flip_vertical = cv2.flip(img, 0)
cv2.imwrite("3_6.png", flip_vertical)

## 3_7
plt.figure()
colors = ('b', 'g', 'r')
for i, col in enumerate(colors):
    hist = cv2.calcHist([img], [i], None, [256], [0, 256])
    plt.plot(hist, color=col)
    plt.xlim([0, 256])
plt.title("Histograma RGB")
plt.savefig("3_7.png")
plt.close()

## 3_8
plt.figure()
gray_hist = cv2.calcHist([gray], [0], None, [256], [0, 256])
plt.plot(gray_hist, color='black')
plt.title("Histograma em escala de cinza")
plt.xlim([0, 256])
plt.savefig("3_8.png")
plt.close()

## 3_9_a
equalized = cv2.equalizeHist(gray)
cv2.imwrite("3_9_a.png", equalized)

## 3_9_b
plt.figure()
eq_hist = cv2.calcHist([equalized], [0], None, [256], [0, 256])
plt.plot(eq_hist, color='black')
plt.title("Histograma Equalizado")
plt.xlim([0, 256])
plt.savefig("3_9_b.png")
plt.close()

## 3_10
sobelx = cv2.Sobel(gray, cv2.CV_64F, 1, 0, ksize=5)
sobely = cv2.Sobel(gray, cv2.CV_64F, 0, 1, ksize=5)
sobel = cv2.magnitude(sobelx, sobely)
sobel = np.uint8(np.clip(sobel, 0, 255))
cv2.imwrite("3_10.png", sobel)

## 3_11
canny = cv2.Canny(gray, 100, 200)
cv2.imwrite("3_11.png", canny)

## 3_12
blur = cv2.blur(img, (5, 5))
cv2.imwrite("3_12.png", blur)